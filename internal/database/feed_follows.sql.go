// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: feed_follows.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createFeedFollow = `-- name: CreateFeedFollow :execresult
INSERT INTO feed_follows (id, user_id, feed_id, created_at, updated_at) VALUES (?, ?, ?, ?, ?)
`

type CreateFeedFollowParams struct {
	ID        string
	UserID    string
	FeedID    string
	CreatedAt time.Time
	UpdatedAt sql.NullTime
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createFeedFollow,
		arg.ID,
		arg.UserID,
		arg.FeedID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const deleteUserFeedFollow = `-- name: DeleteUserFeedFollow :execresult
DELETE FROM feed_follows WHERE id = ?
`

func (q *Queries) DeleteUserFeedFollow(ctx context.Context, id string) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteUserFeedFollow, id)
}

const getFeedFollowById = `-- name: GetFeedFollowById :one
SELECT id, user_id, feed_id, created_at, updated_at FROM feed_follows WHERE id = ?
`

func (q *Queries) GetFeedFollowById(ctx context.Context, id string) (FeedFollow, error) {
	row := q.db.QueryRowContext(ctx, getFeedFollowById, id)
	var i FeedFollow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FeedID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserFeedFollow = `-- name: GetUserFeedFollow :many
SELECT feed_follows.id, feed_follows.user_id, feed_follows.feed_id, feed_follows.created_at, feed_follows.updated_at FROM feeds
JOIN feed_follows ON feeds.id = feed_follows.feed_id 
WHERE feed_follows.user_id = ?
`

func (q *Queries) GetUserFeedFollow(ctx context.Context, userID string) ([]FeedFollow, error) {
	rows, err := q.db.QueryContext(ctx, getUserFeedFollow, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeedFollow
	for rows.Next() {
		var i FeedFollow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FeedID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
